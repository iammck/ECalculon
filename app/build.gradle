apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'

android {
    compileSdkVersion 22
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "com.mck.ecalculon"
        minSdkVersion 9
        targetSdkVersion 22
        versionCode 12
        versionName "basic"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        travis {
            // if building with the ci service, this env var exists.
            if (System.getenv("KEY_ALIAS") != null){
                // specific to the ci build
                storeFile file("keystore/ecalculon.keystore")
                storePassword System.getenv("KSPWD")
                keyAlias System.getenv("KEY_ALIAS")
                keyPassword System.getenv("KEY_PWD")
            }
        }

        console {
            // we can find a console, is it also not the travis console?
            if (System.console() != null && System.getenv("KEY_ALIAS") == null){
                storeFile file("keystore/ecalculon.keystore")
                storePassword new String(System.console()
                        .readPassword("\n\$ Enter keystore password: "))
                keyAlias new String(System.console()
                        .readLine("\n\$ Enter key alias: "))
                keyPassword new String(System.console()
                        .readPassword("\n\$ Enter key password: "))
            }
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // if building with the ci service
            if (System.getenv("KEY_ALIAS") != null){
                signingConfig signingConfigs.travis
            } else if ( System.console() != null){
                signingConfig signingConfigs.console
            }
        }
    }
    packagingOptions {
        exclude 'LICENSE.txt'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.0.0'

    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.0'
}

/*play {
    serviceAccountEmail = ''
    pk12File = file("keystore/ecalculonp12.p12")
}*/

play {
    serviceAccountEmail = System.getenv("SAEMAIL")
    pk12File = file("keystore/ecalculonp12.p12")
}


////////////////
// PUBLISHING///
////////////////

task publish {}

task getCommitMessagePublishMap(type:Exec){
    commandLine 'git','log', '-1'
    standardOutput = new ByteArrayOutputStream()
    doLast {
        String publishMap = standardOutput.toString()
        if ( publishMap.contains('[PUBLISH')){
            def start = publishMap.indexOf('[PUBLISH)') + 8
            def stop = publishMap.indexOf("]", start)
            publishMap = '[' + publishMap.getAt(start..stop) + ']';
        } else {
            publishMap = "[]"
        }
        java.nio.file.Files.write(
            java.nio.file.Paths.get('app', 'build', 'tmp', 'publishMap.txt'),
            publishMap.getBytes())
    }
}

project.afterEvaluate {
    // Path to the publishMap file
    java.nio.file.Path pathToPublishMap =
            java.nio.file.Paths.get('app', 'build', 'tmp', 'publishMap.txt')
    if (java.nio.file.Files.exists(pathToPublishMap)) {
        // get the publish map string
        File publishMapFile = pathToPublishMap.toFile()
        String pms = publishMapFile.getText()

        System.out.println("publishVariants afterEvaluate string found pms " + pms)

        // evaluate the publish Map, then for each variant and track pair,
        evaluate(pms).each { key, value ->
            // set up the varaint name.
            String variant = key[0].toUpperCase() + key.toString().substring(1)
            // this may need to happen after eval so that task exists.
            def publishVariant = project.tasks.getByName("publish" + variant)
            publish.dependsOn publishVariant // set publish depends on
            //set the publish variant task play track to the track b4 execution.
            publishVariant.doFirst { play.track = value }
        }
    }
}